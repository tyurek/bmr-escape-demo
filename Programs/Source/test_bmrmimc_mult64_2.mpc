def cond(bit_selector, val0, val1):
    return (1-bit_selector)*val0 + (bit_selector)*val1

@vectorize
def XOR(a,b):
    # Assume a,b are sint in 0,1
    return a + b - 2*a*b

@vectorize
def AND(a,b):
    return a*b

@vectorize
def COND(s,ifa,ifb,a=0,b=1):
    return (s-b)/(a-b) * ifa + \
           (s-a)/(b-a) * ifb


from circuit_forbmr import Circuit
import itertools

@vectorize
def map_wirelabel_inputs(inpwires, inp_sints, labels0, labels1, maskbit):
    # For each input wire w, retrieve either label0[w] or label1[w], 
    #  depending on inp_sint (and after correcting for maskbit).
    # This could be called Oblivious Transfer
    assert len(inpwires) == len(inp_sints)
    inp_labels = sint.Array(len(inpwires))
    @for_range_opt(len(inpwires))
    def _loop(i):
        w = inpwires[i]
        inp_labels[i] = COND(XOR(inp_sints[i], maskbit[w]), labels0[w], labels1[w])
    #inp_labels = [COND(XOR(inp_sints[i], maskbit[inpwires[i]]), labels0[inpwires[i]], labels1[inpwires[i]]) for i in range(len(inpwires))]
    return inp_labels.reveal()
    #return inp_labels

try:
    circuit = Circuit('program')
    #mult64 = Circuit('aes_128')
    circuit.compile()
except FileNotFoundError:
    print('The mult64.txt circuit was not found. Try:')
    print(' wget https://homes.esat.kuleuven.be/~nsmart/MPC/mult64.txt -O Programs/Circuits/mult64.txt')
    raise

if 1:
    # Phase 2: Input wire label mapping
    # can't read these from the circuit description sadly
    p0_num_inputs = 2
    p1_num_inputs = 4

    '''
    # bit_decompose defaults to 64 bits (which we assume all inputs are)
    bitsize = sum(circuit.n_input_wires) // circuit.n_inputs
    #print(bitsize)
    #print(circuit.n_inputs)
    inp_sints_0_int = sint.get_input_from(0, size=p0_num_inputs)
    inp_sints_0_bits = [inp_sints_0_int[i].bit_decompose() for i in range(p0_num_inputs)]
    inp_sints_0_all_bits = [inp_sints_0_bits[i//bitsize][i%bitsize] for i in range(p0_num_inputs*bitsize)]
    inp_sints_1_int = sint.get_input_from(1, size=p1_num_inputs)
    inp_sints_1_bits = [inp_sints_1_int[i].bit_decompose() for i in range(p1_num_inputs)]
    inp_sints_1_all_bits = [inp_sints_1_bits[i//bitsize][i%bitsize] for i in range(p1_num_inputs*bitsize)]

    #print("len(inp_sints_0):", len(inp_sints_0))
    #print("len(inp_sints_1):", len(inp_sints_1))
    
    #inp_sints = [i for i in inp_sints_0_all_bits] + [i for i in inp_sints_1_all_bits]
    #inp_sints = Array.create_from([i for i in inp_sints_0_all_bits] + [i for i in inp_sints_1_all_bits])
    
    inp_sints = sint.Array(sum(circuit.n_input_wires))
    inp_sints[0:128] = inp_sints_0_all_bits
    inp_sints[128:] = inp_sints_1_all_bits



    num_labels = circuit.n_wires
    print("num_labels", num_labels)
    code1, labels0 = sint.read_from_file(regint(0), num_labels)
    code2, labels1 = sint.read_from_file(regint(num_labels), num_labels)
    code3, maskbit = sint.read_from_file(regint(num_labels+num_labels), num_labels)

    #todo: avoid doing this
    labels0 = Array.create_from([i for i in labels0])
    labels1 = Array.create_from([i for i in labels1])
    maskbit = Array.create_from([i for i in maskbit])

    inpwires = cint.Array(sum(circuit.n_input_wires))
    inpwires[:] = range(sum(circuit.n_input_wires))
    inpwires = cint.Array(64)
    inpwires[:] = range(64)
    inp_labels = map_wirelabel_inputs(inpwires, inp_sints, labels0, labels1, maskbit)
    print_ln('inp_labels')
    inp_labels.print_reveal_nested()
    #print_ln("%s", [label.reveal() for label in inp_labels[1:5]])
    #f = Array.create_from(inp_labels)
    #f.print_reveal_nested()

